// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Decco = require("decco/src/Decco.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function event_encode(v) {
  return Js_dict.fromArray([
              /* tuple */[
                "typeName",
                Decco.stringToJson(v.typeName)
              ],
              /* tuple */[
                "fieldName",
                Decco.stringToJson(v.fieldName)
              ],
              /* tuple */[
                "arguments",
                v.arguments
              ],
              /* tuple */[
                "identity",
                v.identity
              ],
              /* tuple */[
                "source",
                v.source
              ],
              /* tuple */[
                "request",
                v.request
              ],
              /* tuple */[
                "prev",
                Decco.optionToJson((function (v) {
                        return v;
                      }), v.prev)
              ]
            ]);
}

function event_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "typeName"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [{
                  path: ".typeName" + e.path,
                  message: e.message,
                  value: e.value
                }]);
    } else {
      var match$2 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "fieldName"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [{
                    path: ".fieldName" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }]);
      } else {
        var match$3 = /* Ok */Block.__(0, [Belt_Option.getWithDefault(Js_dict.get(dict, "arguments"), null)]);
        if (match$3.tag) {
          var e$2 = match$3[0];
          return /* Error */Block.__(1, [{
                      path: ".arguments" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }]);
        } else {
          var match$4 = /* Ok */Block.__(0, [Belt_Option.getWithDefault(Js_dict.get(dict, "identity"), null)]);
          if (match$4.tag) {
            var e$3 = match$4[0];
            return /* Error */Block.__(1, [{
                        path: ".identity" + e$3.path,
                        message: e$3.message,
                        value: e$3.value
                      }]);
          } else {
            var match$5 = /* Ok */Block.__(0, [Belt_Option.getWithDefault(Js_dict.get(dict, "source"), null)]);
            if (match$5.tag) {
              var e$4 = match$5[0];
              return /* Error */Block.__(1, [{
                          path: ".source" + e$4.path,
                          message: e$4.message,
                          value: e$4.value
                        }]);
            } else {
              var match$6 = /* Ok */Block.__(0, [Belt_Option.getWithDefault(Js_dict.get(dict, "request"), null)]);
              if (match$6.tag) {
                var e$5 = match$6[0];
                return /* Error */Block.__(1, [{
                            path: ".request" + e$5.path,
                            message: e$5.message,
                            value: e$5.value
                          }]);
              } else {
                var match$7 = Decco.optionFromJson((function (v) {
                        return /* Ok */Block.__(0, [v]);
                      }), Belt_Option.getWithDefault(Js_dict.get(dict, "prev"), null));
                if (match$7.tag) {
                  var e$6 = match$7[0];
                  return /* Error */Block.__(1, [{
                              path: ".prev" + e$6.path,
                              message: e$6.message,
                              value: e$6.value
                            }]);
                } else {
                  return /* Ok */Block.__(0, [{
                              typeName: match$1[0],
                              fieldName: match$2[0],
                              arguments: match$3[0],
                              identity: match$4[0],
                              source: match$5[0],
                              request: match$6[0],
                              prev: match$7[0]
                            }]);
                }
              }
            }
          }
        }
      }
    }
  }
}

exports.event_encode = event_encode;
exports.event_decode = event_decode;
/* No side effect */
