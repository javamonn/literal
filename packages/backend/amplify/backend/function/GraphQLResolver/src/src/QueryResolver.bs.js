// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Decco = require("decco/src/Decco.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");

function id(param) {
  return param.id;
}

function createdAt(param) {
  return param.createdAt;
}

function screenshotId(param) {
  return param.screenshotId;
}

function note(param) {
  return param.note;
}

function argumentsInput_encode(v) {
  return Js_dict.fromArray([
              /* tuple */[
                "id",
                Decco.optionToJson(Decco.stringToJson, v.id)
              ],
              /* tuple */[
                "createdAt",
                Decco.optionToJson(Decco.stringToJson, v.createdAt)
              ],
              /* tuple */[
                "screenshotId",
                Decco.stringToJson(v.screenshotId)
              ],
              /* tuple */[
                "note",
                Decco.stringToJson(v.note)
              ]
            ]);
}

function argumentsInput_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var dict = match[0];
    var match$1 = Decco.optionFromJson(Decco.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict, "id"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [{
                  path: ".id" + e.path,
                  message: e.message,
                  value: e.value
                }]);
    } else {
      var match$2 = Decco.optionFromJson(Decco.stringFromJson, Belt_Option.getWithDefault(Js_dict.get(dict, "createdAt"), null));
      if (match$2.tag) {
        var e$1 = match$2[0];
        return /* Error */Block.__(1, [{
                    path: ".createdAt" + e$1.path,
                    message: e$1.message,
                    value: e$1.value
                  }]);
      } else {
        var match$3 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "screenshotId"), null));
        if (match$3.tag) {
          var e$2 = match$3[0];
          return /* Error */Block.__(1, [{
                      path: ".screenshotId" + e$2.path,
                      message: e$2.message,
                      value: e$2.value
                    }]);
        } else {
          var match$4 = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict, "note"), null));
          if (match$4.tag) {
            var e$3 = match$4[0];
            return /* Error */Block.__(1, [{
                        path: ".note" + e$3.path,
                        message: e$3.message,
                        value: e$3.value
                      }]);
          } else {
            return /* Ok */Block.__(0, [{
                        id: match$1[0],
                        createdAt: match$2[0],
                        screenshotId: match$3[0],
                        note: match$4[0]
                      }]);
          }
        }
      }
    }
  }
}

function input(param) {
  return param.input;
}

function arguments_encode(v) {
  return Js_dict.fromArray([/* tuple */[
                "input",
                argumentsInput_encode(v.input)
              ]]);
}

function arguments_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  } else {
    var match$1 = argumentsInput_decode(Belt_Option.getWithDefault(Js_dict.get(match[0], "input"), null));
    if (match$1.tag) {
      var e = match$1[0];
      return /* Error */Block.__(1, [{
                  path: ".input" + e.path,
                  message: e.message,
                  value: e.value
                }]);
    } else {
      return /* Ok */Block.__(0, [{
                  input: match$1[0]
                }]);
    }
  }
}

function resolver(ctx) {
  var match = Belt_Result.map(arguments_decode(ctx.arguments), input);
  if (match.tag) {
    console.log("Unable to decode arguments");
    return Js_exn.raiseError(match[0].message);
  } else {
    return match[0].screenshotId;
  }
}

var CreateHighlightFromScreenshot = {
  id: id,
  createdAt: createdAt,
  screenshotId: screenshotId,
  note: note,
  argumentsInput_encode: argumentsInput_encode,
  argumentsInput_decode: argumentsInput_decode,
  input: input,
  arguments_encode: arguments_encode,
  arguments_decode: arguments_decode,
  resolver: resolver
};

exports.CreateHighlightFromScreenshot = CreateHighlightFromScreenshot;
/* No side effect */
