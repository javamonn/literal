input S3ObjectInput {
  bucket: String!
  key: String!
  region: String!
  localUri: String
  mimeType: String
}

type S3Object @aws_iam {
  bucket: String!
  key: String!
  region: String!
}

type Screenshot
  @model
  @auth(
    rules: [{ allow: owner, ownerField: "owner", operations: [create, read] }]
  ) {
  id: ID!
  createdAt: String!
  file: S3Object!
  owner: String
}

input CreateScreenshotInput {
  id: ID
  createdAt: String
  file: S3ObjectInput!
}

input CreateHighlightInput {
  id: ID
  createdAt: String
  text: String!
  note: String
  highlightScreenshotId: ID
}

input CreateTagInput {
  id: ID
  createdAt: String
  text: String!
}

input CreateHighlightTagInput {
  id: ID
  highlightId: ID!
  tagId: ID!
  createdAt: String
}

input DeleteHighlightTagInput {
  id: ID!
}

type Tag
  @model
  @key(fields: ["id"])
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  createdAt: String!
  text: String!
  owner: String!
  highlights: [HighlightTag!]! @connection(keyName: "byTag", fields: ["id"])
}

type Highlight
  @model
  @key(fields: ["id"])
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  createdAt: String!
  text: String!
  note: String
  screenshot: Screenshot @connection
  owner: String
  tags: [HighlightTag!]! @connection(keyName: "byHighlight", fields: ["id"])
}

type HighlightTag
  @model(queries: null)
  @key(name: "byHighlight", fields: ["highlightId", "tagId"])
  @key(name: "byTag", fields: ["tagId", "highlightId"])
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "owner"
        operations: [create, read, update, delete]
      }
    ]
  ) {
  id: ID!
  highlightId: ID!
  tagId: ID!
  createdAt: String!
  highlight: Highlight! @connection(fields: ["highlightId"])
  tag: Tag! @connection(fields: ["tagId"])
}

type Profile
  @model
  @key(fields: ["owner"])
  @auth(
    rules: [
      { allow: owner, ownerField: "owner", operations: [read, update] }
      { allow: private, provider: iam, operations: [create] }
    ]
  ) {
  id: ID!
  owner: String!
  createdAt: String!
  isOnboarded: Boolean!
}

input CreateProfileInput {
  id: ID!
  owner: String!
  createdAt: String
  isOnboarded: Boolean!
}

input CreateHighlightFromScreenshotInput {
  id: ID
  createdAt: String
  screenshotId: String!
  note: String
}

input UpdateHighlightInput {
  id: ID!
  createdAt: String
  text: String
  note: String
  owner: String
  highlightScreenshotId: ID
}

input UpdateHighlightAndTagsInput {
  updateHighlight: UpdateHighlightInput
  createTags: [CreateTagInput!]
  createHighlightTags: [CreateHighlightTagInput!]
  deleteHighlightTags: [DeleteHighlightTagInput!]
}

type DeletionResult {
  id: ID!
}

type UpdateHighlightAndTagsResult {
  updateHighlight: Highlight
  createTags: [Tag!]
  createHighlightTags: [HighlightTag!]
  deleteHighlightTags: [DeletionResult!]
}

input CreateHighlightAndTagsInput {
  createHighlight: CreateHighlightInput!
  createTags: [CreateTagInput!]
  createHighlightTags: [CreateHighlightTagInput!]
}

type CreateHighlightAndTagsResult {
  createHighlight: Highlight!
  createTags: [Tag!]
  createHighlightTags: [HighlightTag!]
}

type Mutation {
  createHighlightFromScreenshot(
    input: CreateHighlightFromScreenshotInput!
  ): Highlight
    @function(name: "GraphQLResolver-${env}")
    @auth(rules: [{ allow: private }])

  createTags(input: [CreateTagInput!]!): [Tag!]!
  createHighlightTags(input: [CreateHighlightTagInput!]!): [HighlightTag!]!
  deleteHighlightTags(input: [DeleteHighlightTagInput!]!): [HighlightTag!]!

  updateHighlightAndTags(
    input: UpdateHighlightAndTagsInput!
  ): UpdateHighlightAndTagsResult!

  createHighlightAndTags(
    input: CreateHighlightAndTagsInput!
  ): CreateHighlightAndTagsResult!
}
